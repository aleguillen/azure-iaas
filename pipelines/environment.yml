parameters:
- name: environment
  type: string
  displayName: 'The environment name'

- name: service_connection_name
  type: string
  displayName: 'The Service Connection to run Stage'

- name: dependsOn
  type: string
  displayName: 'The components this job depends on like another job'
  default: ''

jobs:
- deployment: ${{ parameters.environment }}
  dependsOn: ${{ parameters.dependsOn }}
  displayName: Deploy
  environment: ${{ parameters.environment }}
  strategy:
    runOnce:
      deploy:
        steps:
        - checkout: self
        - task: DownloadBuildArtifacts@0
          inputs:
            buildType: 'current'
            downloadType: 'single'
            artifactName: 'infra'
            downloadPath: '$(System.DefaultWorkingDirectory)/_artifacts'

        - task: AzureCLI@1
          displayName: 'Azure CLI - Deploy Terraform State Storage Account'
          inputs:
            azureSubscription: ${{ parameters.service_connection_name }}
            scriptLocation: inlineScript
            inlineScript: |
              # Create Azure resource group
              az group create --location $(location) --name $(terraformstoragerg)
              
              # Create Azure Storage Account
              az storage account create --name $(terraformstorageaccount) --resource-group $(terraformstoragerg) --location $(location) --sku Standard_LRS --kind StorageV2
              
              # Create Storage Container
              az storage container create --name terraform --account-name $(terraformstorageaccount)
              
              # Get Storage Key
              set KEY=$(az storage account keys list -g $(terraformstoragerg) -n $(terraformstorageaccount) --query "[0].value" -o tsv)
              
              # Set Storage Key as Variable for later use
              echo "##vso[task.setvariable variable=storagekey]$KEY"
              
        - task: qetza.replacetokens.replacetokens-task.replacetokens@3
          displayName: 'Replace tokens in terraform vars file'
          inputs:
            targetFiles: '$(System.DefaultWorkingDirectory)/_artifacts/infra/**/*.tfvars'
            escapeType: none
            tokenPrefix: '__'
            tokenSuffix: '__'

        - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
          displayName: 'Install Terraform 0.12.24'
          inputs:
            terraformVersion: 0.12.24

        - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
          displayName: 'Terraform : init'
          inputs:
            workingDirectory: '$(System.DefaultWorkingDirectory)/_artifacts/infra'
            backendServiceArm: ${{ parameters.service_connection_name }}
            backendAzureRmResourceGroupName: '$(terraformstoragerg)'
            backendAzureRmStorageAccountName: '$(terraformstorageaccount)'
            backendAzureRmContainerName: terraform
            backendAzureRmKey: 'ado/terraform.tfstate'
        
        - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
          displayName: 'Terraform : plan'
          inputs:
            command: plan
            workingDirectory: '$(System.DefaultWorkingDirectory)/_artifacts/infra'
            environmentServiceNameAzureRM: ${{ parameters.service_connection_name }}
            backendServiceArm: ${{ parameters.service_connection_name }}
            backendAzureRmResourceGroupName: '$(terraformstoragerg)'
            backendAzureRmStorageAccountName: '$(terraformstorageaccount)'
            backendAzureRmContainerName: terraform
            backendAzureRmKey: 'ado/terraform.tfstate'
                
        - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
          displayName: 'Terraform : apply -auto-approve'
          inputs:
            command: apply
            commandOptions: '-auto-approve'
            workingDirectory: '$(System.DefaultWorkingDirectory)/_artifacts/infra'
            environmentServiceNameAzureRM: ${{ parameters.service_connection_name }}
            backendServiceArm: ${{ parameters.service_connection_name }}
            backendAzureRmResourceGroupName: '$(terraformstoragerg)'
            backendAzureRmStorageAccountName: '$(terraformstorageaccount)'
            backendAzureRmContainerName: terraform
            backendAzureRmKey: 'ado/terraform.tfstate'